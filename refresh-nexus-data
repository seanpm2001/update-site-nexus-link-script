#!/usr/bin/env bash

# safer bash script 
set -o nounset -o errexit -o pipefail
# don't split on spaces, only on lines
IFS=$'\n\t'

echoerr() { 
    echo "$(date +%s):" 1>&2;
	echo "$@" 1>&2;

	if [ ! -z "${SLACK_URL+x}" ]; then
		curl --show-error --fail -X POST -H "Content-type: application/json" --data @- "$SLACK_URL" <<EOF
			{
				"channel": "rascal",
				"text": "Error: $@"
			}
EOF
	fi
 }

#----------------------------------------#
#            Configuration               #
#----------------------------------------#
# Update variables below after a 
# new release

# aka rascal version
readonly SHELL_STABLE_VERSION="0.26.4"
# aka rascal-eclipse version
readonly UPDATE_STABLE_VERSION="0.26.6"
# typepal
readonly TYPEPAL_STABLE_VERSION="0.7.8"


#----------------------------------------#
#            Implementation              #
#----------------------------------------#

if [ $# -ne 1 ]; then
    echoerr "You must supply the target directory in which the output is stored."

    exit 1
fi

readonly TARGET_DIR="$1"
readonly NEXUS_ROOT="https://nexus.usethesource.io/"

readonly SCRATCH=$(mktemp -d -t "sync-nexus-XXXXX")
finish() {
  rm -rf "$SCRATCH"
}
trap finish EXIT

ANY_CHANGES=false

download_console() {
    if [ ! -d "$TARGET_DIR/console" ]; then
        echoerr "The target directory does not contain a console subdirectory, please make sure the target directory is the right directory."
        exit 1
    fi
    local readonly version="$1"
    local readonly target_jar="$TARGET_DIR/console/rascal-$version.jar"
    local readonly target_sha256="$TARGET_DIR/console/rascal-$version.sha256"
    if [ ! -f "$target_jar" ]; then
        echo "Downloading console $version from nexus"
        if ! curl -f -s -L "$NEXUS_ROOT/service/local/artifact/maven/resolve?g=org.rascalmpl&a=rascal&r=releases&v=$version" > /dev/null; then
            echoerr "Error downloading $version from nexus (version is not available)"
            exit 2
        else
            curl -f -s -L "$NEXUS_ROOT/service/local/artifact/maven/content?g=org.rascalmpl&a=rascal&r=releases&v=$version" > "$target_jar"
            sha256sum -b "$target_jar" > "$target_sha256"
            echo "Succesfully downloaded $version"
            ANY_CHANGES=true
        fi
    fi
}

download_update_site() {
    if [ ! -d "$TARGET_DIR/archive" ]; then
        echoerr "The target directory does not contain a archive subdirectory, please make sure the target directory is the right directory."
        exit 1
    fi

    local readonly target_sub_dir="$1"
    local readonly id="$2"
    local readonly version="$3"
    local readonly target_update_site="$TARGET_DIR/$target_sub_dir/$version"

    if [ ! -d "$target_update_site" ]; then
        echo "Downloading update site $version from nexus"
        local readonly zip_file="$SCRATCH/update-site.zip"

        local url="$NEXUS_ROOT/content/repositories/releases/org/rascalmpl/$id/$version/$id-$version.zip"
        if ! curl -f -s -L "$url" > "$zip_file" ; then
            echoerr "Error in downloading update site from nexus: $url"
            exit 2;
        else
            # zip file has been downloaded, unpack and move to the 
            mkdir -p "$target_update_site"
            if ! unzip -qq "$zip_file" -d "$target_update_site"; then
                echoerr "unpacking zip downloaded for version $version failed"
                rm -rf "$target_update_site"
                exit 3;
            else
                echo "Succesfully downloaded $version"
                ANY_CHANGES=true
            fi
        fi
    fi
}

download_all_update_sites_released() {
    local readonly target_sub_dir="$1"
    local readonly id="$2"
    curl -f -s -L "$NEXUS_ROOT/content/repositories/releases/org/rascalmpl/$id/maven-metadata.xml" \
        | sed -n 's/^[ \t]*<version>\([0-9.]*\)<\/version>/\1/p' | while read -r version ; do
        download_update_site "$target_sub_dir" "$id" "$version"
    done
}

download_all_releases() {
    curl -f -s -L "$NEXUS_ROOT/content/repositories/releases/org/rascalmpl/rascal/maven-metadata.xml" \
        | sed -n 's/^[ \t]*<version>\([0-9.]*\)<\/version>/\1/p' | while read -r version ; do
        download_console "$version"
    done
    download_all_update_sites_released "archive" "rascal-update-site"
    download_all_update_sites_released "libraries/typepal" "typepal-update-site"
}

replace_file_symlink() {
    local readonly source="$1" target="$2"
    if [ ! -f "$source" ]; then
        echoerr "$source does not exists, are you sure it is released?"
        exit 1
    fi
    if [ ! -f "$target" ]; then
        ln -s "$source" "$target"
        ANY_CHANGES=true
    else
        if [[ $( readlink "$target" || "") != "$source" ]]; then
            ln -fs "$source" "$target"
            ANY_CHANGES=true
        fi
    fi
}

replace_dir_symlink() {
    local readonly source="$1" target="$2"
    if [ ! -d "$source" ]; then
        echoerr "$source does not exists, are you sure it is released?"
        exit 1
    fi
    if [ ! -d "$target" ]; then
        ln -s "$source" "$target"
        ANY_CHANGES=true
    else
        if [[ $( readlink "$target" || "") != "$source" ]]; then
            ln -fns "$source" "$target"
            ANY_CHANGES=true
        fi
    fi
}

update_stable_pointers() {
    # shell
    replace_file_symlink "$TARGET_DIR/console/rascal-$SHELL_STABLE_VERSION.sha256" "$TARGET_DIR/console/rascal-shell-stable.sha256"
    replace_file_symlink "$TARGET_DIR/console/rascal-$SHELL_STABLE_VERSION.jar" "$TARGET_DIR/console/rascal-shell-stable.jar"
    # update site
    replace_dir_symlink "$TARGET_DIR/archive/$UPDATE_STABLE_VERSION" "$TARGET_DIR/stable"
    # typepal
    replace_dir_symlink "$TARGET_DIR/libraries/typepal/$TYPEPAL_STABLE_VERSION" "$TARGET_DIR/typepal"
}

update_release_pointers() {
    local readonly last_shell_release=$(curl -f -s -L "$NEXUS_ROOT/content/repositories/releases/org/rascalmpl/rascal/maven-metadata.xml" \
        | sed -n 's/^[ \t]*<version>\([0-9.]*\)<\/version>/\1/p' | tail -n 1 )
    replace_file_symlink "$TARGET_DIR/console/rascal-$last_shell_release.sha256" "$TARGET_DIR/console/rascal-shell-release.sha256"
    replace_file_symlink "$TARGET_DIR/console/rascal-$last_shell_release.jar" "$TARGET_DIR/console/rascal-shell-release.jar"

    local readonly last_update_site_release=$(curl -f -s -L "$NEXUS_ROOT/content/repositories/releases/org/rascalmpl/rascal-update-site/maven-metadata.xml" \
        | sed -n 's/^[ \t]*<version>\([0-9.]*\)<\/version>/\1/p' | tail -n 1 )
    replace_dir_symlink "$TARGET_DIR/archive/$last_update_site_release" "$TARGET_DIR/release"
}



readonly SNAPSHOT_VERSION_FILE="$SCRATCH/current-snapshot-version.xml"
remote_build=""
snapshot_version=""
get_latest_snapshot_version() {
    local readonly product="$1"

    # lookup the current latest snapshot and build time
    curl -s -f -L "$NEXUS_ROOT/content/repositories/snapshots/org/rascalmpl/$product/maven-metadata.xml" > "$SNAPSHOT_VERSION_FILE"
    remote_build="$( sed -n 's/^[ \t]*<lastUpdated>\([^<]*\)<.*$/\1/p' "$SNAPSHOT_VERSION_FILE" )"
    snapshot_version="$( sed -n 's/^[ \t]*<version>\([^<]*\)<.*$/\1/p' "$SNAPSHOT_VERSION_FILE" | tail -1)"
}

full_build_string=""
get_full_build_string() {
    local readonly product="$1" snapshot="$2"

    curl -s -f -L "$NEXUS_ROOT/content/repositories/snapshots/org/rascalmpl/$product/$snapshot/maven-metadata.xml" > "$SNAPSHOT_VERSION_FILE"
    full_build_string="$( sed -n 's/^[ \t]*<value>\([^<]*\)<.*$/\1/p' "$SNAPSHOT_VERSION_FILE" | uniq )"
}

readonly SHELL_SNAPSHOT_VERSION_FILE="$TARGET_DIR/shell-snapshot"
update_shell_snapshot() {
    local readonly current_build_snapshot=$( cat "$SHELL_SNAPSHOT_VERSION_FILE")

    # lookup the current latest snapshot and build time
    get_latest_snapshot_version "rascal"
    local readonly remote_build_snapshot="$snapshot_version-$remote_build"

    if [[ "$current_build_snapshot" != "$remote_build_snapshot" ]]; then
        echo "Downloading new rascal-shell-snapshot ($remote_build_snapshot)"

        # get the full build version string from the meta data file
        get_full_build_string "rascal" "$snapshot_version"

        # now download the jar
        local readonly new_file="$SCRATCH/rascal-shell-unstable.jar"
        if ! curl -f -s -L "$NEXUS_ROOT/content/repositories/snapshots/org/rascalmpl/rascal/$snapshot_version/rascal-$full_build_string.jar" > "$new_file" ; then
            echoerr "Failed downloading rascal-shell: $full_build_string from nexus"
            exit 2
        else
            local readonly target_file="$TARGET_DIR/console/rascal-shell-unstable.jar"
            local readonly target_sha256="$TARGET_DIR/console/rascal-shell-unstable.sha256"
            if [ ! -f "$target_file" ]; then
                sha256sum -b "$new_file" > "$target_sha256"
                if ! mv "$new_file" "$target_file"; then
                    rm -f "$target_sha256"
                    echoerr "Could not create new file"
                    exit 4
                else
                    echo "Created unstable shell jar"
                    ANY_CHANGES=true
                    echo -n "$remote_build_snapshot" > "$SHELL_SNAPSHOT_VERSION_FILE"
                fi
                return
            fi

            local readonly target_file_backup="$TARGET_DIR/console/rascal-shell-unstable.jar-backup"
            if [ -f "$target_file_backup" ]; then
                echoerr "$target_file_backup still existed, something went wrong?"
                exit 4
            fi
            if ! mv "$target_file" "$target_file_backup"; then
                echoerr "could not replace target file, might be in use, try again next time?"
                exit 4
            fi
            sha256sum -b "$new_file" > "$target_sha256"
            if ! mv "$new_file" "$target_file"; then
                mv "$target_file_backup" "$target_file"
                echoerr "Could not replace the file with the new file, putting back the old file"
                exit 4
            else
                echo "Replaced unstable shell jar"
                ANY_CHANGES=true
                echo -n "$remote_build_snapshot" > "$SHELL_SNAPSHOT_VERSION_FILE"
                rm "$target_file_backup"
            fi
        fi
    fi
}

update_update_site_snapshot() {
    local readonly product="$1" target="$2"
    local readonly UPDATE_SITE_SNAPSHOT_VERSION_FILE="$TARGET_DIR/$product-snapshot"
    local readonly current_build_snapshot=$( cat "$UPDATE_SITE_SNAPSHOT_VERSION_FILE")

    # lookup the current latest snapshot and build time
    get_latest_snapshot_version "$product"
    local readonly remote_build_snapshot="$snapshot_version-$remote_build"

    if [[ "$current_build_snapshot" != "$remote_build_snapshot" ]]; then
        echo "Downloading new $product ($remote_build_snapshot)"

        # get the full build version string from the meta data file
        get_full_build_string "$product" "$snapshot_version"

        # now download the zip
        local readonly new_file="$SCRATCH/update-site.zip"
        if ! curl -f -s -L "$NEXUS_ROOT/content/repositories/snapshots/org/rascalmpl/$product/$snapshot_version/$product-$full_build_string.zip" > "$new_file" ; then
            echoerr "Failed downloading $product: $full_build_string from nexus"
            exit 2
        else
            local readonly new_dir="$SCRATCH/update-site"
            if ! unzip -qq "$new_file" -d "$new_dir"; then
                echoerr "unpacking zip downloaded for version $new_file failed"
                exit 4
            fi

            local readonly target_update="$target"
            if [ ! -d "$target_update" ]; then
                if ! mv "$new_dir" "$target_update"; then
                    echoerr "Could not create new directory $target_update"
                    exit 4
                else
                    echo "Created new update-site directory"
                    ANY_CHANGES=true
                    echo -n "$remote_build_snapshot" > "$UPDATE_SITE_SNAPSHOT_VERSION_FILE"
                fi
                return
            fi

            local readonly target_update_backup="$target_update-backup"
            if [ -d "$target_update_backup" ]; then
                echoerr "$target_update_backup still existed, something went wrong?"
                exit 4
            fi
            if ! mv "$target_update" "$target_update_backup"; then
                echoerr "could not replace target file, might be in use, try again next time? ($target_update_backup)"
                exit 4
            fi
            if ! mv "$new_dir" "$target_update"; then
                mv "$target_update_backup" "$target_update"
                echoerr "Could not replace the file with the new file, putting back the old file ($target_update_backup)"
                exit 4
            else
                echo "Replaced unstable update-site"
                ANY_CHANGES=true
                echo -n "$remote_build_snapshot" > "$UPDATE_SITE_SNAPSHOT_VERSION_FILE"
                rm -r "$target_update_backup"
            fi
        fi
    fi
}

download_all_releases
update_stable_pointers 
update_release_pointers 

update_shell_snapshot
update_update_site_snapshot "rascal-update-site" "$TARGET_DIR/unstable"
update_update_site_snapshot "rascal-eclipse-libraries-update-site" "$TARGET_DIR/libs"
update_update_site_snapshot "rascal-core-update-site" "$TARGET_DIR/rascal-core-plugin"

echo "$ANY_CHANGES"
#update_unstable


#download_update_site "0.9.3"
#download_console "0.9.5"
#download_console "0.9.7"

